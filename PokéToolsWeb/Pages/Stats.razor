@page "/stats"
@using PokéToolsThèque;
@inject HttpClient Http;

<h3>Stats</h3>

<div class="stats-container">

    <section class="stat-box">
        <h4>Types les plus fréquents</h4>
        <ul>
            @foreach (var stat in infoTypes.OrderByDescending(s => s.Value))
            {
                <li><strong>@stat.Key</strong> : @stat.Value</li>
            }
        </ul>
    </section>

    <section class="stat-box">
        <h4>Répartition par Génération</h4>
        <ul>
            @foreach (var stat in infoGen)
            {
                <li><strong>@stat.Key</strong> : @stat.Value</li>
            }
        </ul>
    </section>

    <section class="stat-box">
        <h4>Infos Pokédex</h4>
        <ul>
            @foreach (var stat in infoDex)
            {
                <li><strong>@stat.Key</strong> : @stat.Value</li>
            }
        </ul>
    </section>

    <section class="stat-box">
        <h4>Top 10 Talents</h4>
        <ol>
            @foreach (var stat in infoAbilities)
            {
                <li><strong>@stat.Key</strong> : @stat.Value</li>
            }
        </ol>
    </section>

</div>

<style>
    .stats-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        justify-content: space-between;
    }

    section.stat-box {
        flex: 1 1 300px; 
        max-width: 500px;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    h4 {
        color: #333;
        margin-bottom: 0.5rem;
        border-bottom: 2px solid #ddd;
        padding-bottom: 0.3rem;
    }

    ul, ol {
        list-style: none;
        padding-left: 0;
        margin: 0;
    }

    li {
        padding: 0.3rem 0;
        border-bottom: 1px solid #eee;
    }
</style>



@code {

    Dictionary<string, int> infoTypes = new Dictionary<string, int>();
    Dictionary<string, int> infoGen = new Dictionary<string, int>();
    Dictionary<string, int> infoDex = new Dictionary<string, int>();
    Dictionary<string, int> infoAbilities = new Dictionary<string, int>();
    List<Pokemon> allPokemons = new List<Pokemon>();
    List<string> availableTypes = new();

    protected override async Task OnInitializedAsync()
    {
        allPokemons = await GetPokemons();

        availableTypes = allPokemons
            .SelectMany(p => new[] { p.Type1, p.Type2 })
            .Where(t => !string.IsNullOrWhiteSpace(t))
            .Distinct()
            .OrderBy(t => t)
            .ToList();

        availableTypes.ForEach(t =>
        {
            infoTypes.Add(t, allPokemons.Count(p => p.Type1 == t || p.Type2 == t));
        });

        for(int i = 1; i <= 9; i++)
        {
            infoGen.Add($"Gen {i}", allPokemons.Count(p => p.Gen == i));
        } 

        infoDex.Add("+500 total stats", allPokemons.Count(p => p.Total > 500));
        infoDex.Add("Fully evolved",allPokemons.Count(p => p.IsFullyEvolved));
        infoDex.Add("Legendary", allPokemons.Count(p => p.Category == "Legendary"));
        infoDex.Add("Mythical", allPokemons.Count(p => p.Category == "Mythical"));

        var topAbilities = allPokemons
            .SelectMany(p => p.Abilities)                     
            .Where(a => !string.IsNullOrWhiteSpace(a.Name))   
            .GroupBy(a => a.Name)                            
            .Select(g => new { AbilityName = g.Key, Count = g.Count() })
            .OrderByDescending(a => a.Count)
            .Take(10)
            .ToList();

        topAbilities.ForEach(a => { infoAbilities.Add(a.AbilityName, a.Count); });

        StateHasChanged();
    }

    private async Task<List<Pokemon>> GetPokemons()
    {
        return await Http.GetFromJsonAsync<List<Pokemon>>("https://localhost:7206/api/Pokemons") ?? new List<Pokemon>();
    }
}
