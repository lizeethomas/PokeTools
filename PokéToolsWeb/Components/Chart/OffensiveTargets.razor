@using PokéToolsWeb.Components.Pokemons

<div class="offensive-coverage">
    <div class="type-chart-header">
        <h3>Offensive Coverage</h3>
    </div>
    <div class="offensive-coverage-table">
        @if (OffensiveCoverage?.SuperEffective?.Any() == true)
        {
            <div class="offensive-row super">
                <div class="offensive-header">Super Effective (@OffensiveCoverage.SuperEffective.Count)</div>
                <div class="offensive-icons">
                    @foreach (var poke in OffensiveCoverage.SuperEffective)
                    {
                        <PokemonCard Pokemon="poke"
                                     StartHover="StartHover"
                                     CancelHover="CancelHover"
                                     UpdateMousePosition="UpdateMousePosition"
                                     OnClick="() => OnPokemonSelected.InvokeAsync(poke)" />
                    }
                </div>
            </div>
        }

        @if (NeutralPokemons.Any())
        {
            <div class="offensive-row neutral">
                <div class="offensive-header">Neutral (@NeutralPokemons.Count)</div>
                <div class="offensive-icons">
                    @foreach (var poke in NeutralPokemons)
                    {
                        <PokemonCard Pokemon="poke"
                                     StartHover="StartHover"
                                     CancelHover="CancelHover"
                                     UpdateMousePosition="UpdateMousePosition"
                                     OnClick="() => OnPokemonSelected.InvokeAsync(poke)" />
                    }
                </div>
            </div>
        }

        @if (OffensiveCoverage?.NotVeryEffective?.Any() == true)
        {
            <div class="offensive-row not-very">
                <div class="offensive-header">Not Very Effective (@OffensiveCoverage.NotVeryEffective.Count)</div>
                <div class="offensive-icons">
                    @foreach (var poke in OffensiveCoverage.NotVeryEffective)
                    {
                        <PokemonCard Pokemon="poke"
                                     StartHover="StartHover"
                                     CancelHover="CancelHover"
                                     UpdateMousePosition="UpdateMousePosition"
                                     OnClick="() => OnPokemonSelected.InvokeAsync(poke)" />
                    }
                </div>
            </div>
        }

        @if (OffensiveCoverage?.Ineffective?.Any() == true)
        {
            <div class="offensive-row ineffective">
                <div class="offensive-header">Ineffective (@OffensiveCoverage.Ineffective.Count)</div>
                <div class="offensive-icons">
                    @foreach (var poke in OffensiveCoverage.Ineffective)
                    {
                        <PokemonCard Pokemon="poke"
                                     StartHover="StartHover"
                                     CancelHover="CancelHover"
                                     UpdateMousePosition="UpdateMousePosition"
                                     OnClick="() => OnPokemonSelected.InvokeAsync(poke)" />
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public OffensiveCoverage OffensiveCoverage { get; set; } = new();

    [Parameter] public EventCallback<Pokemon> OnPokemonSelected { get; set; }
    [Parameter] public EventCallback<Pokemon> StartHover { get; set; }
    [Parameter] public EventCallback CancelHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> UpdateMousePosition { get; set; }

    [Parameter] public List<Pokemon> AllPokemons { get; set; } = new();

    private List<Pokemon> NeutralPokemons
    {
        get
        {
            var coveredIdentifiers = new HashSet<string>(
                (OffensiveCoverage.SuperEffective ?? Enumerable.Empty<Pokemon>())
                    .Concat(OffensiveCoverage.NotVeryEffective ?? Enumerable.Empty<Pokemon>())
                    .Concat(OffensiveCoverage.Ineffective ?? Enumerable.Empty<Pokemon>())
                    .Select(p => p.PokeApiIdentifier)
                    .Where(id => !string.IsNullOrEmpty(id))
            );

            return AllPokemons
                .Where(p => !string.IsNullOrEmpty(p.PokeApiIdentifier) &&
                            !coveredIdentifiers.Contains(p.PokeApiIdentifier))
                .ToList();
        }
    }

}