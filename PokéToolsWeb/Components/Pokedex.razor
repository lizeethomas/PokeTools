@using PokéToolsWeb.Components

<div class="pokedex">
    <div class="pokedex-header">
        <div class="pokedex-title">
            <h3>Pokédex</h3>
            <span class="match-count">(@Pokemons.Count)</span>
        </div>

        <div class="pokedex-actions">
            <button class="sort-button" @onclick="ToggleSort">
                @(CurrentSort == SortMode.Dex ? "Sorted by Dex" : "Sorted by Name")
            </button>

            <button class="randomize-button" @onclick="OnRandomizeTeam" disabled="@IsLoadingTeam">
                @(IsLoadingTeam ? "Loading..." : "🎲 Randomize")
            </button>
        </div>
    </div>

    <div class="pokemon-panel">
        @if (Pokemons.Any())
        {
            <div class="card-container">
                @foreach (var pokemon in SortedPokemons)
                {
                    <PokemonCard Pokemon="@pokemon"
                                 CancelHover="CancelHover"
                                 OnClick="OnPokemonSelected"
                                 StartHover="StartHover"
                                 UpdateMousePosition="UpdateMousePosition">
                    </PokemonCard>
                }
            </div>
        }
        else
        {
            <div class="no-pokemon">
                <span>No Pokémon found with that filter!</span>
            </div>
        }
    </div>
</div>


@code {
    [Parameter] public List<Pokemon> Pokemons { get; set; } = new();

    [Parameter] public EventCallback<Pokemon> OnPokemonSelected { get; set; }
    [Parameter] public EventCallback<Pokemon> StartHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> CancelHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> UpdateMousePosition { get; set; }

    [Parameter] public EventCallback OnRandomizeTeam { get; set; }
    [Parameter] public bool IsLoadingTeam { get; set; }

    private List<Pokemon> SortedPokemons = new();

    public enum SortMode
    {
        Dex,
        Name
    }

    private SortMode CurrentSort = SortMode.Dex;

    private void ToggleSort()
    {
        CurrentSort = CurrentSort == SortMode.Dex ? SortMode.Name : SortMode.Dex;
        SortPokemons();
    }

    protected override void OnParametersSet()
    {
        SortPokemons();
    }

    private void SortPokemons()
    {
        SortedPokemons = CurrentSort switch
        {
            SortMode.Name => Pokemons.OrderBy(p => p.Name).ToList(),
            _ => Pokemons.OrderBy(p => p.Dex).ToList(),
        };
    }
}
