@inject HttpClient Http
@inject IJSRuntime JS

<div class="team">
    <div class="team-header">
        <div class="team-header-title">
            <h3>Team</h3>
        </div>
        <div class="team-buttons">
            <button @onclick="ClearTeam" class="clear-team-button">Clear Team</button>
            <button @onclick="() => OnToggleChartView.InvokeAsync()" class="offensive-coverage-button">
                @(ShowTypeChart ? "Offensive Coverage" : "Defensive Cover")
            </button>
            <button @onclick="ExportFullTeamToShowdown" class="export-team-button">Copy to Showdown !</button>
        </div>
    </div>

    <div class="mini-team full-team-preview">
        @for (int i = 0; i < 6; i++)
        {
            if (i < Team.Count && Items.Count > 0)
            {
                var poke = Team[i];
                <TeamBuilderSlot @key="poke"
                                 Pokemon="poke"
                                 OnPokemonDeselected="OnPokemonDeselected"
                                 StartHover="StartHover"
                                 CancelHover="CancelHover"
                                 UpdateMousePosition="UpdateMousePosition"
                                 Items="Items" />
            }
            else
            {
                <div class="team-slot empty-slot">
                    <span><img src="https://tinyurl.com/mrw7z944" /></span>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public List<Pokemon> Team { get; set; } = new();
    [Parameter] public List<Item> Items { get; set; } = new();
    [Parameter] public EventCallback<Pokemon> OnPokemonDeselected { get; set; }
    [Parameter] public EventCallback<Pokemon> StartHover { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> UpdateMousePosition { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> CancelHover { get; set; }
    [Parameter] public EventCallback OnClearTeam { get; set; }

    [Parameter] public bool ShowTypeChart { get; set; }
    [Parameter] public EventCallback OnToggleChartView { get; set; }

    private HashSet<string> AlreadyLoaded = new();
    private bool _shouldLoadSets = false;
    private int _lastTeamCount = 0;

    protected override void OnParametersSet()
    {
        if (Team.Count != _lastTeamCount)
        {
            _shouldLoadSets = true;
            _lastTeamCount = Team.Count;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldLoadSets)
        {
            var pokemonsToLoad = Team.Where(p => !AlreadyLoaded.Contains(p.Name)).ToList();

            foreach (var poke in pokemonsToLoad)
            {
                await LoadSetFromApiAsync(poke);
            }

            _shouldLoadSets = false;
            StateHasChanged();
        }
    }


    private async Task ClearTeam() => await OnClearTeam.InvokeAsync();

    private async Task ExportFullTeamToShowdown()
    {
        var showdownExport = new System.Text.StringBuilder();

        foreach (var pokemon in Team)
        {
            if (pokemon is null) continue;

            string selectedItem = pokemon.SelectedItem ?? "";
            string selectedAbility = pokemon.SelectedAbility ?? "";
            string selectedNature = pokemon.SelectedNature ?? "";
            var evs = pokemon.EVs ?? new Dictionary<string, int>();
            var moves = pokemon.SelectedMoves ?? new List<string>();

            showdownExport.Append(pokemon.Name);
            if (!string.IsNullOrEmpty(selectedItem))
                showdownExport.Append(" @ ").Append(selectedItem);
            showdownExport.AppendLine();

            if (!string.IsNullOrEmpty(selectedAbility))
                showdownExport.AppendLine($"Ability: {selectedAbility}");

            showdownExport.AppendLine("Level: 100");

            if (!string.IsNullOrEmpty(selectedNature))
                showdownExport.AppendLine($"{selectedNature} Nature");

            var evParts = evs.Where(ev => ev.Value > 0).Select(ev => $"{ev.Value} {ev.Key}");
            if (evParts.Any())
                showdownExport.AppendLine("EVs: " + string.Join(" / ", evParts));

            showdownExport.Replace("Speed", "Spe");
            showdownExport.Replace("Defense", "Def");
            showdownExport.Replace("SpDef", "SpD");
            showdownExport.Replace("Attack", "Atk");
            showdownExport.Replace("SpAtk", "SpA");

            foreach (var move in moves.Where(m => !string.IsNullOrWhiteSpace(m)))
                showdownExport.AppendLine($"- {move}");

            showdownExport.AppendLine();
        }

        await JS.InvokeVoidAsync("copyToClipboard", showdownExport.ToString());
    }

    private async Task LoadSetFromApiAsync(Pokemon poke)
    {
        if (poke is null || AlreadyLoaded.Contains(poke.Name)) return;

        try
        {
            var randomPokemon = await GetRandomPokemon(poke);
            var set = randomPokemon?.Set?.Roles?.Values.FirstOrDefault();

            if (set is not null)
            {
                var index = Team.FindIndex(p => p.Name == poke.Name);
                if (index >= 0)
                {
                    var target = Team[index];

                    // Moves
                    if (target.SelectedMoves == null || target.SelectedMoves.All(string.IsNullOrWhiteSpace))
                        target.SelectedMoves = set.Moves?.Take(4).ToList() ?? new List<string>();

                    // Ability
                    if (string.IsNullOrWhiteSpace(target.SelectedAbility))
                        target.SelectedAbility = set.Abilities?.FirstOrDefault() ?? "";

                    // Item
                    if (string.IsNullOrWhiteSpace(target.SelectedItem))
                        target.SelectedItem = set.Items?.FirstOrDefault() ?? "";

                    // EVs
                    if (target.EVs == null || target.EVs.All(kvp => kvp.Value == 0))
                        target.EVs = set.EVs != null ? new Dictionary<string, int>(set.EVs) : new Dictionary<string, int>();

                    // Nature
                    if (string.IsNullOrWhiteSpace(target.SelectedNature))
                        target.SelectedNature = "Bashful";

                    AlreadyLoaded.Add(poke.Name);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement set pour {poke.Name} : {ex.Message}");
        }
    }



    private async Task<RandomPokemon> GetRandomPokemon(Pokemon p)
    {
        return await Http.GetFromJsonAsync<RandomPokemon>($"https://localhost:7206/api/Pokemon/{p.Name}/RandomSet")
            ?? new RandomPokemon();
    }
}
